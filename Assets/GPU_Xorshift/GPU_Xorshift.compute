// ※参考
// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
// https://www.slideshare.net/UnityTechnologiesJapan/unity-2017-81056841

#pragma kernel CSMain
#pragma kernel CSTest

uint _seed;
RWStructuredBuffer<float> _resultBuffer;
RWTexture2D<float4> _testTextureBuffer;

// Xorshift(2^32 - 1)
uint Random_Xorshift()
{
    uint x = _seed;
    x ^= (x << 13);
    x ^= (x >> 17);
    x ^= (x << 5);
    return x;
}

// Xorshift(2^128 - 1)
uint Random_Xorshift128()
{
    uint x = _seed;
    uint y = x * 3266489917 + 1;
    uint z = y * 3266489917 + 1;
    uint w = z * 3266489917 + 1; 
    uint t = x ^ (x << 11);
    x = y; y = z; z = w;
    w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
    return w;
}

// Wang Hash
uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

// ------------------------------------------------------------------------

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_GroupThreadID)
{
    _seed = WangHash(_seed + id.x);
    float rand = float(Random_Xorshift()) * (1.0 / 4294967296.0);
    _resultBuffer[id.x] = rand;
}

[numthreads(256, 1, 1)]
void CSTest(uint3 id : SV_DispatchThreadID)
{
    // Textureの位置に応じてseedをずらしていく
    _seed = WangHash((_seed + id.x) * (id.y + 1));
    float rand = float(Random_Xorshift()) * (1.0 / 4294967296.0);
    _testTextureBuffer[id.xy] = float4(rand, rand, rand, 1);
}
